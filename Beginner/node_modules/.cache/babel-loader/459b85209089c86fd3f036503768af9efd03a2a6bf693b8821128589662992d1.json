{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { useLocation } from \"./useLocation\";\nexport function useFetch(city) {\n  _s();\n  const [weatherData, setWeatherData] = useState();\n  const [isLoading, setIsLoading] = useState(true);\n  const [lat, long, timezone, name, c_code] = useLocation(city);\n  useEffect(() => {\n    async function getData() {\n      try {\n        const res = await fetch(`https://api.open-meteo.com/v1/forecast?latitude=${lat}&longitude=${long}&timezone=${timezone}&daily=weathercode,temperature_2m_max,temperature_2m_min`);\n        const data = await res.json();\n        setWeatherData(data.daily);\n      } catch (error) {\n        console.error(\"Error fetching weather data:\", error);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n    getData();\n  }, [lat, long, timezone]);\n  return [weatherData, name, c_code, isLoading];\n}\n_s(useFetch, \"UfdALL1mjxpxSz3wSWwzImEcqBU=\", false, function () {\n  return [useLocation];\n});","map":{"version":3,"names":["useEffect","useState","useLocation","useFetch","city","_s","weatherData","setWeatherData","isLoading","setIsLoading","lat","long","timezone","name","c_code","getData","res","fetch","data","json","daily","error","console"],"sources":["/home/ufaz/Desktop/web_dev/Frontend/practice/ReactCourseProjects/src/components/FuncBased_Apps/WeatherApp/useFetch.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport { useLocation } from \"./useLocation\";\n\nexport function useFetch(city) {\n  const [weatherData, setWeatherData] = useState();\n  const [isLoading, setIsLoading] = useState(true);\n  const [lat, long, timezone, name, c_code] = useLocation(city);\n\n  useEffect(() => {\n    async function getData() {\n      try {\n        const res = await fetch(\n          `https://api.open-meteo.com/v1/forecast?latitude=${lat}&longitude=${long}&timezone=${timezone}&daily=weathercode,temperature_2m_max,temperature_2m_min`\n        );\n\n        const data = await res.json();\n        setWeatherData(data.daily);\n      } catch (error) {\n        console.error(\"Error fetching weather data:\", error);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n\n    getData();\n  }, [lat, long, timezone]);\n\n  return [weatherData, name, c_code, isLoading];\n}\n"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,WAAW,QAAQ,eAAe;AAE3C,OAAO,SAASC,QAAQA,CAACC,IAAI,EAAE;EAAAC,EAAA;EAC7B,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGN,QAAQ,CAAC,CAAC;EAChD,MAAM,CAACO,SAAS,EAAEC,YAAY,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAACS,GAAG,EAAEC,IAAI,EAAEC,QAAQ,EAAEC,IAAI,EAAEC,MAAM,CAAC,GAAGZ,WAAW,CAACE,IAAI,CAAC;EAE7DJ,SAAS,CAAC,MAAM;IACd,eAAee,OAAOA,CAAA,EAAG;MACvB,IAAI;QACF,MAAMC,GAAG,GAAG,MAAMC,KAAK,CACpB,mDAAkDP,GAAI,cAAaC,IAAK,aAAYC,QAAS,0DAChG,CAAC;QAED,MAAMM,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAI,CAAC,CAAC;QAC7BZ,cAAc,CAACW,IAAI,CAACE,KAAK,CAAC;MAC5B,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACtD,CAAC,SAAS;QACRZ,YAAY,CAAC,KAAK,CAAC;MACrB;IACF;IAEAM,OAAO,CAAC,CAAC;EACX,CAAC,EAAE,CAACL,GAAG,EAAEC,IAAI,EAAEC,QAAQ,CAAC,CAAC;EAEzB,OAAO,CAACN,WAAW,EAAEO,IAAI,EAAEC,MAAM,EAAEN,SAAS,CAAC;AAC/C;AAACH,EAAA,CAzBeF,QAAQ;EAAA,QAGsBD,WAAW;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}